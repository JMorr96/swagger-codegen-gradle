buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.swagger.codegen.v3:swagger-codegen-maven-plugin:3.0.16')
    }
}

apply plugin: 'base'

group = 'com.arnoldgalovics.blog'


import io.swagger.codegen.v3.CodegenConfigLoader
import io.swagger.codegen.v3.DefaultGenerator
import io.swagger.codegen.v3.ClientOptInput
import io.swagger.codegen.v3.ClientOpts
import io.swagger.v3.parser.OpenAPIV3Parser

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'com.arnoldgalovics.blog'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.fork = true

    /* Setting the build directory of the subproject
       to user-service-contract/build/[projectName]
     */
    project.buildDir = "${rootProject.buildDir}/${project.name}"

    // Source folder is now different as the build directory is set to a custom path
    sourceSets {
        main {
            java {
                srcDir "${project.buildDir}/src/main/java"
            }
        }
    }

    // This is just for generating the source jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}

ext.appName      = 'user-service'
ext.apiPackage   = 'com.arnoldgalovics.blog.userservice.api'
ext.modelPackage = 'com.arnoldgalovics.blog.userservice.model'
ext.swaggerFile  = "${rootDir}/api/simple-inventory.yaml"

project("${rootProject.appName}-server") { // user-service-server

    // Dependencies for the generated sources
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE')
        compile('io.springfox:springfox-swagger2:2.7.0')
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Actual task for generating the server
    task generateServer {
        doLast {
            def openAPI = new OpenAPIV3Parser().read(rootProject.swaggerFile.toString(), null, null)
            def clientOpts = new ClientOptInput().openAPI(openAPI)
            def codegenConfig = CodegenConfigLoader.forName('spring')
            codegenConfig.setOutputDir(project.buildDir.toString())
            clientOpts.setConfig(codegenConfig)
            def clientOps = new ClientOpts()
            clientOps.setProperties([
                    'dateLibrary'     : 'java8', // Date library to use
                    'useTags'         : 'true',  // Use tags for the naming
                    'interfaceOnly'   : 'true'   // Generating the Controller API interface and the models only
            ])
            clientOpts.setOpts(clientOps)

            def generator = new DefaultGenerator().opts(clientOpts)
            generator.generate() // Executing the generation
        }
    }

    /* Defining the order of the tasks and the dependency between them.
       As this is a Java project, it will execute the generateServer task first,
       then the compilation of the generated files.
     */
    compileJava.dependsOn('generateServer')
}